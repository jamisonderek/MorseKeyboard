/* 

https://morsecode.world/international/morse2.html
   Toggle CAPS               [-..--]
   LEFT, RIGHT, UP, DOWN, /  [-..-. / L R U D]

   
   Still needed:
     %                       [----- -..-. -----]
                          
   ALT, CTRL, WIN,           (Hold down w/next char, or press by itself) 
   ; { } < >
   # $ _ ^ 
   * | \ ~ ` (space)
   PgUp PgDn Home End 
   Del Ins
   F1-F12 PrtSc


               Keyboard.write(backspace);
               Keyboard.press(KEY_UP_ARROW);
               delay(100);
               Keyboard.releaseAll();

*/

#include "Keyboard.h"

#define convertChar 200
#define buflen 20
#define backspace 8
char buf[buflen];
char sent[4];
int idx = 0;
bool sendBlank = false;
int blank = 0;
bool caps = true;
int slash = 0;

void setup() {
   Serial.begin(9600);
   Keyboard.begin();

   // We read our data on pin 10.  
   // This has an internal 50K pullup resistor connected to VCC.
   pinMode(10, INPUT_PULLUP);

   // The switch is connected between Pin 10 and Pin A0.  We set pin A0
   // to an OUTPUT mode and send a logic low (GND signal).  
   pinMode(A0, OUTPUT);
   digitalWrite(A0, LOW);

   // When the switch is open it will read logic HIGH (due to pullup resisitor).
   // When the switch is closed it will read logic LOW (due to A0 being GND).

   // Clear buffers.
   memset(buf, 0, buflen);
   memset(sent, 0, 4);
}

//
// Returns how long the button was pressed.
//
int durationLow() {
   int duration = 0;
   while (!digitalRead(10)) {
      duration++;
      delay(10);
   }

   if (duration != 0) {
     Serial.println(duration);
   }

   return duration;
}

//
// Returns how long the button was released (up to convertChar)
//
int durationHigh() {
   int duration = 0;

   while (digitalRead(10) && duration < convertChar) {
     duration++;
     delay(5);
   }

   return duration;
}

//
// Protect from buffer overflow.
//
void protectBuffer() {
   if (idx > buflen - 2) {
     Serial.println("Buffer full");
     idx=buflen - 2;
   }
}

//
// Converts duration into a tone (short .   long -   backspace <    none space   error ?)
//
// Huge slop in these values to allow for keying by someone that has never practiced before.
//
char durationToTone(int duration) {
   char tone = 0;
   if (duration > 8 && duration <= 20) {
      tone = '.';
   }
   else if (duration > 25 && duration < 80) {
      tone = '-';
   }
   else if (duration > 100) {
      tone = '<';
   }
   else if (duration == 0) {
      tone = ' ';
   }
   else {
      tone = '?';
   }

   return tone;
}

//
// Convert the buffer to a character.
//
char bufToChar() {
  char ch;
/*
 * The following binary tree would also decode...
 * 1  ET
 * 2  IANM
 * 3  SURWDKGO
 * 4  HVF¤L¶PJB=CYZQ¤¤
 * 5  54¤3¤¤¤2&¤+¤¤¤¤16=/¤¤¤(¤7¤¤¤8¤90
 * 
 */
  if (buf[0]=='.' && buf[1]=='-' && buf[2]==0) {
    ch = 'A';
  } else if (buf[0]=='-' && buf[1]=='.' && buf[2]=='.' && buf[3]=='.' && buf[4]==0) {
    ch = 'B';
  } else if (buf[0]=='-' && buf[1]=='.' && buf[2]=='-' && buf[3]=='.' && buf[4]==0) {
    ch = 'C';
  } else if (buf[0]=='-' && buf[1]=='.' && buf[2]=='.' && buf[3]==0) {
    ch = 'D';
  } else if (buf[0]=='.' && buf[1]==0) {
    ch = 'E';
  } else if (buf[0]=='.' && buf[1]=='.' && buf[2]=='-' && buf[3]=='.' && buf[4]==0) {
    ch = 'F';
  } else if (buf[0]=='-' && buf[1]=='-' && buf[2]=='.' && buf[3]==0) {
    ch = 'G';
  } else if (buf[0]=='.' && buf[1]=='.' && buf[2]=='.' && buf[3]=='.' && buf[4]==0) {
    ch = 'H';
  } else if (buf[0]=='.' && buf[1]=='.' && buf[2]==0) {
    ch = 'I';
  } else if (buf[0]=='.' && buf[1]=='-' && buf[2]=='-' && buf[3]=='-' && buf[4]==0) {
    ch = 'J';
  } else if (buf[0]=='-' && buf[1]=='.' && buf[2]=='-' && buf[3]==0) {
    ch = 'K';
  } else if (buf[0]=='.' && buf[1]=='-' && buf[2]=='.' && buf[3]=='.' && buf[4]==0) {
    ch = 'L';
  } else if (buf[0]=='-' && buf[1]=='-' && buf[2]==0) {
    ch = 'M';
  } else if (buf[0]=='-' && buf[1]=='.' && buf[2]==0) {
    ch = 'N';
  } else if (buf[0]=='-' && buf[1]=='-' && buf[2]=='-' && buf[3]==0) {
    ch = 'O';
  } else if (buf[0]=='.' && buf[1]=='-' && buf[2]=='-' && buf[3]=='.' && buf[4]==0) {
    ch = 'P';
  } else if (buf[0]=='-' && buf[1]=='-' && buf[2]=='.' && buf[3]=='-' && buf[4]==0) {
    ch = 'Q';
  } else if (buf[0]=='.' && buf[1]=='-' && buf[2]=='.' && buf[3]==0) {
    ch = 'R';
  } else if (buf[0]=='.' && buf[1]=='.' && buf[2]=='.' && buf[3]==0) {
    ch = 'S';
  } else if (buf[0]=='-' && buf[1]==0) {
    ch = 'T';
  } else if (buf[0]=='.' && buf[1]=='.' && buf[2]=='-' && buf[3]==0) {
    ch = 'U';
  } else if (buf[0]=='.' && buf[1]=='.' && buf[2]=='.' && buf[3]=='-' && buf[4]==0) {
    ch = 'V';
  } else if (buf[0]=='.' && buf[1]=='-' && buf[2]=='-' && buf[3]==0) {
    ch = 'W';
  } else if (buf[0]=='-' && buf[1]=='.' && buf[2]=='.' && buf[3]=='-' && buf[4]==0) {
    ch = 'X';
  } else if (buf[0]=='-' && buf[1]=='.' && buf[2]=='-' && buf[3]=='-' && buf[4]==0) {
    ch = 'Y';
  } else if (buf[0]=='-' && buf[1]=='-' && buf[2]=='.' && buf[3]=='.' && buf[4]==0) {
    ch = 'Z';
  } else if (buf[0]=='-' && buf[1]=='-' && buf[2]=='-' && buf[3]=='-' && buf[4]=='-' && buf[5]==0) {
    ch = '0';
  } else if (buf[0]=='.' && buf[1]=='-' && buf[2]=='-' && buf[3]=='-' && buf[4]=='-' && buf[5]==0) {
    ch = '1';
  } else if (buf[0]=='.' && buf[1]=='.' && buf[2]=='-' && buf[3]=='-' && buf[4]=='-' && buf[5]==0) {
    ch = '2';
  } else if (buf[0]=='.' && buf[1]=='.' && buf[2]=='.' && buf[3]=='-' && buf[4]=='-' && buf[5]==0) {
    ch = '3';
  } else if (buf[0]=='.' && buf[1]=='.' && buf[2]=='.' && buf[3]=='.' && buf[4]=='-' && buf[5]==0) {
    ch = '4';
  } else if (buf[0]=='.' && buf[1]=='.' && buf[2]=='.' && buf[3]=='.' && buf[4]=='.' && buf[5]==0) {
    ch = '5';
  } else if (buf[0]=='-' && buf[1]=='.' && buf[2]=='.' && buf[3]=='.' && buf[4]=='.' && buf[5]==0) {
    ch = '6';
  } else if (buf[0]=='-' && buf[1]=='-' && buf[2]=='.' && buf[3]=='.' && buf[4]=='.' && buf[5]==0) {
    ch = '7';
  } else if (buf[0]=='-' && buf[1]=='-' && buf[2]=='-' && buf[3]=='.' && buf[4]=='.' && buf[5]==0) {
    ch = '8';
  } else if (buf[0]=='-' && buf[1]=='-' && buf[2]=='-' && buf[3]=='-' && buf[4]=='.' && buf[5]==0) {
    ch = '9';
  } else if (buf[0]=='.' && buf[1]=='-' && buf[2]=='.' && buf[3]=='.' && buf[4]=='.' && buf[5]==0) {
    ch = '&';
  } else if (buf[0]=='.' && buf[1]=='-' && buf[2]=='-' && buf[3]=='-' && buf[4]=='-' && buf[5]=='.' && buf[6]==0) {
    ch = '\'';
  } else if (buf[0]=='.' && buf[1]=='-' && buf[2]=='-' && buf[3]=='.' && buf[4]=='-' && buf[5]=='.' && buf[6]==0) {
    ch = '@';
  } else if (buf[0]=='-' && buf[1]=='.' && buf[2]=='-' && buf[3]=='-' && buf[4]=='.' && buf[5]=='-' && buf[6]==0) {
    ch = ')';
  } else if (buf[0]=='-' && buf[1]=='.' && buf[2]=='-' && buf[3]=='-' && buf[4]=='.' && buf[5]==0) {
    ch = '(';
  } else if (buf[0]=='-' && buf[1]=='-' && buf[2]=='-' && buf[3]=='.' && buf[4]=='.' && buf[5]=='.' && buf[6]==0) {
    ch = ':';
  } else if (buf[0]=='-' && buf[1]=='-' && buf[2]=='.' && buf[3]=='.' && buf[4]=='-' && buf[5]=='-' && buf[6]==0) {
    ch = ',';
  } else if (buf[0]=='-' && buf[1]=='.' && buf[2]=='.' && buf[3]=='.' && buf[4]=='-' && buf[5]==0) {
    ch = '=';
  } else if (buf[0]=='-' && buf[1]=='.' && buf[2]=='-' && buf[3]=='.' && buf[4]=='-' && buf[5]=='-' && buf[6]==0) {
    ch = '!';
  } else if (buf[0]=='.' && buf[1]=='-' && buf[2]=='.' && buf[3]=='-' && buf[4]=='.' && buf[5]=='-' && buf[6]==0) {
    ch = '.';
  } else if (buf[0]=='-' && buf[1]=='.' && buf[2]=='.' && buf[3]=='.' && buf[4]=='.' && buf[5]=='-' && buf[6]==0) {
    ch = '-';
  } else if (buf[0]=='.' && buf[1]=='-' && buf[2]=='.' && buf[3]=='-' && buf[4]=='.' && buf[5]==0) {
    ch = '+';
  } else if (buf[0]=='.' && buf[1]=='-' && buf[2]=='.' && buf[3]=='.' && buf[4]=='-' && buf[5]=='.' && buf[6]==0) {
    ch = '"';
  } else if (buf[0]=='.' && buf[1]=='.' && buf[2]=='-' && buf[3]=='-' && buf[4]=='.' && buf[5]=='.' && buf[6]==0) {
    ch = '?';
  } else if (buf[0]=='-' && buf[1]=='.' && buf[2]=='.' && buf[3]=='-' && buf[4]=='.' && buf[5]==0) {
    ch = '/';
  } else if (buf[0]=='.' && buf[1]=='-' && buf[2]=='.' && buf[3]=='-' && buf[4]==0) {
    // New line.
    ch = 10;
  } else if (buf[0]=='-' && buf[1]=='.' && buf[2]=='.' && buf[3]=='-' && buf[4]=='-' && buf[5]==0) {
    // NONSTANDARD CODE: -..--  Toggle CAPS
    ch = 0;
    caps = !caps;           
    Keyboard.write(caps ? '^':'v');
    delay(250);
    Keyboard.write(backspace);
  }

  return ch;
}

//
// Erase any dots and dashes so far.
//
void eraseDotsAndDashes() {
  for (int i=0; i<idx; i++) {
    Keyboard.write(backspace);
    Serial.print('<');        
  }

  idx = 0;
}

void loop() {
  int duration = durationLow();
  protectBuffer();
  char tone = durationToTone(duration);

  if (tone == '.' || tone == '-') {
    Serial.print(tone);
    Keyboard.write(tone);
    buf[idx++] = tone;
    buf[idx]=0;
  }
  else if (tone == '<') {
    Serial.print(tone);        
    Keyboard.write(backspace);
    idx = 0;
    sendBlank = false;
  }
  else if (tone == ' ') {
    duration = durationHigh();
    if (idx>0) { // We have some dots and dashes.
      if (duration >= convertChar) { // Key has been release long enough to translate to a character.
        char ch = 0;
        eraseDotsAndDashes();
        ch = bufToChar();
        memset(buf, 0, buflen);
        if (ch != 0) {
          sent[2] = sent[1];
          sent[1] = sent[0];
          sent[0] = ch;
          // TODO: Look at sent buffer for interesting commands.
          
          if (ch >= 'A' && ch <='Z' && !caps) { // Convert to lowercase.
            ch += 32;
          }
          Serial.print(ch);
          Keyboard.write(ch);
          if (ch > 32) {
            sendBlank = true;
            blank = 0;
          } else {
            sendBlank = false;
          }
        }
      }
    } else if (duration >= convertChar && sendBlank) {
      blank++;
      if (blank==3) {
        sendBlank = false;
        Serial.print(' ');
        Keyboard.write(' ');
      }
    }
  }
}